/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FileNameContentSyncPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// utils.ts
var findNoteStart = function(fileLines) {
  if (fileLines[0] === "---") {
    for (let i = 1; i < fileLines.length; i++) {
      if (fileLines[i] === "---") {
        return i + 1;
      }
    }
  }
  return 0;
};
var getFileName = function(fileLines, startLine) {
  for (let i = startLine; i < fileLines.length; i++) {
    const line = fileLines[i];
    if (!line || line === " ")
      continue;
    const noTag = replaceTag(line);
    if (!noTag || noTag === " ")
      continue;
    const noSymbol = replaceSymbol(noTag);
    if (!noSymbol || noSymbol === " ")
      continue;
    return noSymbol;
  }
  return null;
};
var replaceTag = function(line) {
  return line.replace(/(?<=(\s|^))#[^\s\!\@\#\$\%\^\&\*\(\)]+(?=(\s|$))/, "");
};
var replaceSymbol = function(line) {
  return line.replace(/[\\/:|#^[\]]/g, "");
};

// main.ts
var DEFAULT_SETTINGS = {
  path: ""
};
var FileNameContentSyncPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.isRenameInProgress = false;
  }
  async onload() {
    await this.loadSettings();
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-open", (file) => {
        this.changeFileName(file);
      })
    );
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        this.changeFileName(file);
      })
    );
    this.addSettingTab(new FileNameContentSyncTab(this.app, this));
  }
  onunload() {
  }
  async changeFileName(file) {
    var _a;
    const validPath = this.settings.path;
    if (validPath === "")
      return;
    const filePath = (_a = file.parent) == null ? void 0 : _a.path;
    const firstPath = filePath == null ? void 0 : filePath.split("/")[0];
    console.log(firstPath, validPath);
    if (this.isRenameInProgress || !(file instanceof import_obsidian.TFile) || file.extension !== "md" || firstPath !== validPath) {
      return;
    }
    const text = await this.app.vault.read(file);
    const content = text.split("\n");
    const startLine = findNoteStart(content);
    const fileName = getFileName(content, startLine);
    if (!fileName)
      return;
    const newPath = `${filePath}/${fileName}.md`;
    await this.app.fileManager.renameFile(file, newPath);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var FileNameContentSyncTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Folder").setDesc("\u751F\u6548\u7684\u8DEF\u5F84").addText((text) => text.setPlaceholder("Enter your path").setValue(this.plugin.settings.path).onChange(async (value) => {
      this.plugin.settings.path = value;
      await this.plugin.saveSettings();
    }));
  }
};
