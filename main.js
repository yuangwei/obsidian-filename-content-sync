/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FileNameContentSyncPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// utils.ts
var findNoteStart = function(fileLines) {
  if (fileLines[0] === "---") {
    for (let i = 1; i < fileLines.length; i++) {
      if (fileLines[i] === "---") {
        return i + 1;
      }
    }
  }
  return 0;
};
var getFileName = function(fileLines, startLine) {
  for (let i = startLine; i < fileLines.length; i++) {
    const line = fileLines[i];
    if (!line || line === " ")
      continue;
    const noTag = replaceTag(line);
    if (!noTag || noTag === " ")
      continue;
    const noSymbol = replaceSymbol(noTag);
    if (!noSymbol || noSymbol === " ")
      continue;
    return noSymbol.replace(/^.*?\s/, "");
  }
  return null;
};
var replaceTag = function(line) {
  return line.replace(/(?<=(\s|^))#[^\s\!\@\#\$\%\^\&\*\(\)]+(?=(\s|$))/, "");
};
var replaceSymbol = function(line) {
  return line.replace(/[\\/:|#^[\]]/g, "");
};

// main.ts
var DEFAULT_SETTINGS = {
  path: ""
};
var FileNameContentSyncPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.isRenameInProgress = false;
  }
  async onload() {
    await this.loadSettings();
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-open", (file) => {
        this.changeFileName(file);
      })
    );
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        this.changeFileName(file);
      })
    );
    this.addSettingTab(new FileNameContentSyncTab(this.app, this));
  }
  onunload() {
  }
  async changeFileName(file) {
    var _a;
    const validPath = this.settings.path;
    if (validPath === "")
      return;
    const filePath = (_a = file.parent) == null ? void 0 : _a.path;
    const firstPath = filePath == null ? void 0 : filePath.split("/")[0];
    console.log(firstPath, validPath);
    if (this.isRenameInProgress || !(file instanceof import_obsidian.TFile) || file.extension !== "md" || firstPath !== validPath) {
      return;
    }
    const text = await this.app.vault.read(file);
    const content = text.split("\n");
    const startLine = findNoteStart(content);
    const fileName = getFileName(content, startLine);
    if (!fileName)
      return;
    const newPath = `${filePath}/${fileName}.md`;
    await this.app.fileManager.renameFile(file, newPath);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var FileNameContentSyncTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Folder").setDesc("\u751F\u6548\u7684\u8DEF\u5F84").addText((text) => text.setPlaceholder("Enter your path").setValue(this.plugin.settings.path).onChange(async (value) => {
      this.plugin.settings.path = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJ1dGlscy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IGZpbmROb3RlU3RhcnQsIGdldEZpbGVOYW1lIH0gZnJvbSAndXRpbHMnO1xuXG4vLyBSZW1lbWJlciB0byByZW5hbWUgdGhlc2UgY2xhc3NlcyBhbmQgaW50ZXJmYWNlcyFcblxuaW50ZXJmYWNlIEZpbGVOYW1lQ29udGVudFN5bmNQbHVnaW5TZXR0aW5ncyB7XG5cdHBhdGg6IHN0cmluZztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogRmlsZU5hbWVDb250ZW50U3luY1BsdWdpblNldHRpbmdzID0ge1xuXHRwYXRoOiAnJ1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWxlTmFtZUNvbnRlbnRTeW5jUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0aXNSZW5hbWVJblByb2dyZXNzOiBib29sZWFuID0gZmFsc2U7XG5cdHNldHRpbmdzOiBGaWxlTmFtZUNvbnRlbnRTeW5jUGx1Z2luU2V0dGluZ3M7XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXG5cdFx0XHR0aGlzLmFwcC52YXVsdC5vbignbW9kaWZ5JywgKGZpbGUpID0+IHtcblx0XHRcdH0pLFxuXHRcdCk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXG5cdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2ZpbGUtb3BlbicsIChmaWxlKSA9PiB7XG5cdFx0XHRcdHRoaXMuY2hhbmdlRmlsZU5hbWUoZmlsZSBhcyBURmlsZSlcblx0XHRcdH0pLFxuXHRcdCk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXG5cdFx0XHR0aGlzLmFwcC52YXVsdC5vbignbW9kaWZ5JywgKGZpbGU6IFRGaWxlKSA9PiB7XG5cdFx0XHRcdHRoaXMuY2hhbmdlRmlsZU5hbWUoZmlsZSBhcyBURmlsZSlcblx0XHRcdH0pLFxuXHRcdCk7XG5cblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IEZpbGVOYW1lQ29udGVudFN5bmNUYWIodGhpcy5hcHAsIHRoaXMpKTtcblxuXHR9XG5cblx0b251bmxvYWQoKSB7XG5cblx0fVxuXG5cdGFzeW5jIGNoYW5nZUZpbGVOYW1lKGZpbGU6IFRGaWxlKSB7XG5cdFx0Y29uc3QgdmFsaWRQYXRoID0gdGhpcy5zZXR0aW5ncy5wYXRoO1xuXHRcdGlmICh2YWxpZFBhdGggPT09ICcnKSByZXR1cm5cblx0XHRjb25zdCBmaWxlUGF0aCA9IGZpbGUucGFyZW50Py5wYXRoXG5cdFx0Y29uc3QgZmlyc3RQYXRoID0gZmlsZVBhdGg/LnNwbGl0KCcvJylbMF1cblx0XHRjb25zb2xlLmxvZyhmaXJzdFBhdGgsIHZhbGlkUGF0aClcblx0XHRpZiAoXG5cdFx0XHR0aGlzLmlzUmVuYW1lSW5Qcm9ncmVzc1xuXHRcdFx0fHwgIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpXG5cdFx0XHR8fCBmaWxlLmV4dGVuc2lvbiAhPT0gJ21kJ1xuXHRcdFx0fHwgZmlyc3RQYXRoICE9PSB2YWxpZFBhdGhcblx0XHQpIHtcblx0XHRcdHJldHVyblxuXHRcdH1cblx0XHRjb25zdCB0ZXh0ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKVxuXHRcdGNvbnN0IGNvbnRlbnQgPSB0ZXh0LnNwbGl0KCdcXG4nKVxuXHRcdGNvbnN0IHN0YXJ0TGluZSA9IGZpbmROb3RlU3RhcnQoY29udGVudClcblx0XHRjb25zdCBmaWxlTmFtZSA9IGdldEZpbGVOYW1lKGNvbnRlbnQsIHN0YXJ0TGluZSlcblx0XHRpZiAoIWZpbGVOYW1lKSByZXR1cm5cblx0XHRjb25zdCBuZXdQYXRoID0gYCR7ZmlsZVBhdGh9LyR7ZmlsZU5hbWV9Lm1kYDtcblx0XHRhd2FpdCB0aGlzLmFwcC5maWxlTWFuYWdlci5yZW5hbWVGaWxlKGZpbGUsIG5ld1BhdGgpO1xuXHR9XG5cblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXHR9XG5cblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG5cdH1cbn1cblxuXG5cbmNsYXNzIEZpbGVOYW1lQ29udGVudFN5bmNUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBGaWxlTmFtZUNvbnRlbnRTeW5jUGx1Z2luO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IEZpbGVOYW1lQ29udGVudFN5bmNQbHVnaW4pIHtcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cblxuXHRkaXNwbGF5KCk6IHZvaWQge1xuXHRcdGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnRm9sZGVyJylcblx0XHRcdC5zZXREZXNjKCdcdTc1MUZcdTY1NDhcdTc2ODRcdThERUZcdTVGODQnKVxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignRW50ZXIgeW91ciBwYXRoJylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdGgpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXRoID0gdmFsdWU7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pKTtcblx0fVxufVxuIiwgImV4cG9ydCBjb25zdCBmaW5kTm90ZVN0YXJ0ID0gZnVuY3Rpb24gKGZpbGVMaW5lczogc3RyaW5nW10pIHtcbiAgaWYgKGZpbGVMaW5lc1swXSA9PT0gJy0tLScpIHtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGZpbGVMaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGZpbGVMaW5lc1tpXSA9PT0gJy0tLScpIHtcbiAgICAgICAgcmV0dXJuIGkgKyAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn1cblxuZXhwb3J0IGNvbnN0IGdldEZpbGVOYW1lID0gZnVuY3Rpb24gKGZpbGVMaW5lczogc3RyaW5nW10sIHN0YXJ0TGluZTogbnVtYmVyKSB7XG4gIGZvciAobGV0IGkgPSBzdGFydExpbmU7IGkgPCBmaWxlTGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBsaW5lID0gZmlsZUxpbmVzW2ldXG4gICAgaWYgKCFsaW5lIHx8IGxpbmUgPT09ICcgJykgY29udGludWVcbiAgICBjb25zdCBub1RhZyA9IHJlcGxhY2VUYWcobGluZSlcbiAgICBpZiAoIW5vVGFnIHx8IG5vVGFnID09PSAnICcpIGNvbnRpbnVlXG4gICAgY29uc3Qgbm9TeW1ib2wgPSByZXBsYWNlU3ltYm9sKG5vVGFnKVxuICAgIGlmICghbm9TeW1ib2wgfHwgbm9TeW1ib2wgPT09ICcgJykgY29udGludWVcbiAgICByZXR1cm4gbm9TeW1ib2wucmVwbGFjZSgvXi4qP1xccy8sICcnKVxuICB9XG4gIHJldHVybiBudWxsXG59XG5cbmNvbnN0IHJlcGxhY2VUYWcgPSBmdW5jdGlvbiAobGluZTogc3RyaW5nKSB7XG4gIHJldHVybiBsaW5lLnJlcGxhY2UoLyg/PD0oXFxzfF4pKSNbXlxcc1xcIVxcQFxcI1xcJFxcJVxcXlxcJlxcKlxcKFxcKV0rKD89KFxcc3wkKSkvLCAnJylcbn1cblxuY29uc3QgcmVwbGFjZVN5bWJvbCA9IGZ1bmN0aW9uIChsaW5lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGxpbmUucmVwbGFjZSgvW1xcXFwvOnwjXltcXF1dL2csICcnKTtcbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQW1HOzs7QUNBNUYsSUFBTSxnQkFBZ0IsU0FBVSxXQUFxQjtBQUMxRCxNQUFJLFVBQVUsQ0FBQyxNQUFNLE9BQU87QUFDMUIsYUFBUyxJQUFJLEdBQUcsSUFBSSxVQUFVLFFBQVEsS0FBSztBQUN6QyxVQUFJLFVBQVUsQ0FBQyxNQUFNLE9BQU87QUFDMUIsZUFBTyxJQUFJO0FBQUEsTUFDYjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0EsU0FBTztBQUNUO0FBRU8sSUFBTSxjQUFjLFNBQVUsV0FBcUIsV0FBbUI7QUFDM0UsV0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLFFBQVEsS0FBSztBQUNqRCxVQUFNLE9BQU8sVUFBVSxDQUFDO0FBQ3hCLFFBQUksQ0FBQyxRQUFRLFNBQVM7QUFBSztBQUMzQixVQUFNLFFBQVEsV0FBVyxJQUFJO0FBQzdCLFFBQUksQ0FBQyxTQUFTLFVBQVU7QUFBSztBQUM3QixVQUFNLFdBQVcsY0FBYyxLQUFLO0FBQ3BDLFFBQUksQ0FBQyxZQUFZLGFBQWE7QUFBSztBQUNuQyxXQUFPLFNBQVMsUUFBUSxVQUFVLEVBQUU7QUFBQSxFQUN0QztBQUNBLFNBQU87QUFDVDtBQUVBLElBQU0sYUFBYSxTQUFVLE1BQWM7QUFDekMsU0FBTyxLQUFLLFFBQVEsb0RBQW9ELEVBQUU7QUFDNUU7QUFFQSxJQUFNLGdCQUFnQixTQUFVLE1BQWM7QUFDNUMsU0FBTyxLQUFLLFFBQVEsaUJBQWlCLEVBQUU7QUFDekM7OztBRHJCQSxJQUFNLG1CQUFzRDtBQUFBLEVBQzNELE1BQU07QUFDUDtBQUVBLElBQXFCLDRCQUFyQixjQUF1RCx1QkFBTztBQUFBLEVBQTlEO0FBQUE7QUFDQyw4QkFBOEI7QUFBQTtBQUFBLEVBRzlCLE1BQU0sU0FBUztBQUNkLFVBQU0sS0FBSyxhQUFhO0FBRXhCLFNBQUs7QUFBQSxNQUNKLEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLFNBQVM7QUFBQSxNQUN0QyxDQUFDO0FBQUEsSUFDRjtBQUVBLFNBQUs7QUFBQSxNQUNKLEtBQUssSUFBSSxVQUFVLEdBQUcsYUFBYSxDQUFDLFNBQVM7QUFDNUMsYUFBSyxlQUFlLElBQWE7QUFBQSxNQUNsQyxDQUFDO0FBQUEsSUFDRjtBQUVBLFNBQUs7QUFBQSxNQUNKLEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLFNBQWdCO0FBQzVDLGFBQUssZUFBZSxJQUFhO0FBQUEsTUFDbEMsQ0FBQztBQUFBLElBQ0Y7QUFFQSxTQUFLLGNBQWMsSUFBSSx1QkFBdUIsS0FBSyxLQUFLLElBQUksQ0FBQztBQUFBLEVBRTlEO0FBQUEsRUFFQSxXQUFXO0FBQUEsRUFFWDtBQUFBLEVBRUEsTUFBTSxlQUFlLE1BQWE7QUE3Q25DO0FBOENFLFVBQU0sWUFBWSxLQUFLLFNBQVM7QUFDaEMsUUFBSSxjQUFjO0FBQUk7QUFDdEIsVUFBTSxZQUFXLFVBQUssV0FBTCxtQkFBYTtBQUM5QixVQUFNLFlBQVkscUNBQVUsTUFBTSxLQUFLO0FBQ3ZDLFlBQVEsSUFBSSxXQUFXLFNBQVM7QUFDaEMsUUFDQyxLQUFLLHNCQUNGLEVBQUUsZ0JBQWdCLDBCQUNsQixLQUFLLGNBQWMsUUFDbkIsY0FBYyxXQUNoQjtBQUNEO0FBQUEsSUFDRDtBQUNBLFVBQU0sT0FBTyxNQUFNLEtBQUssSUFBSSxNQUFNLEtBQUssSUFBSTtBQUMzQyxVQUFNLFVBQVUsS0FBSyxNQUFNLElBQUk7QUFDL0IsVUFBTSxZQUFZLGNBQWMsT0FBTztBQUN2QyxVQUFNLFdBQVcsWUFBWSxTQUFTLFNBQVM7QUFDL0MsUUFBSSxDQUFDO0FBQVU7QUFDZixVQUFNLFVBQVUsR0FBRyxZQUFZO0FBQy9CLFVBQU0sS0FBSyxJQUFJLFlBQVksV0FBVyxNQUFNLE9BQU87QUFBQSxFQUNwRDtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ3BCLFNBQUssV0FBVyxPQUFPLE9BQU8sQ0FBQyxHQUFHLGtCQUFrQixNQUFNLEtBQUssU0FBUyxDQUFDO0FBQUEsRUFDMUU7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNwQixVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNsQztBQUNEO0FBSUEsSUFBTSx5QkFBTixjQUFxQyxpQ0FBaUI7QUFBQSxFQUdyRCxZQUFZLEtBQVUsUUFBbUM7QUFDeEQsVUFBTSxLQUFLLE1BQU07QUFDakIsU0FBSyxTQUFTO0FBQUEsRUFDZjtBQUFBLEVBRUEsVUFBZ0I7QUFDZixVQUFNLEVBQUUsWUFBWSxJQUFJO0FBRXhCLGdCQUFZLE1BQU07QUFFbEIsUUFBSSx3QkFBUSxXQUFXLEVBQ3JCLFFBQVEsUUFBUSxFQUNoQixRQUFRLGdDQUFPLEVBQ2YsUUFBUSxVQUFRLEtBQ2YsZUFBZSxpQkFBaUIsRUFDaEMsU0FBUyxLQUFLLE9BQU8sU0FBUyxJQUFJLEVBQ2xDLFNBQVMsT0FBTyxVQUFVO0FBQzFCLFdBQUssT0FBTyxTQUFTLE9BQU87QUFDNUIsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ2hDLENBQUMsQ0FBQztBQUFBLEVBQ0w7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
